{
  "_args": [
    [
      {
        "raw": "delaunay@0.4.0",
        "scope": null,
        "escapedName": "delaunay",
        "name": "delaunay",
        "rawSpec": "0.4.0",
        "spec": "0.4.0",
        "type": "version"
      },
      "D:\\Work\\Codes\\SMap\\client\\node_modules\\euclideanmst"
    ]
  ],
  "_from": "delaunay@0.4.0",
  "_id": "delaunay@0.4.0",
  "_inCache": true,
  "_location": "/delaunay",
  "_npmUser": {
    "name": "darkskyapp",
    "email": "developer@forecast.io"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "delaunay@0.4.0",
    "scope": null,
    "escapedName": "delaunay",
    "name": "delaunay",
    "rawSpec": "0.4.0",
    "spec": "0.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/euclideanmst"
  ],
  "_resolved": "https://registry.npmjs.org/delaunay/-/delaunay-0.4.0.tgz",
  "_shasum": "e796dff0132930d6c2ee2595410abb5611200b12",
  "_shrinkwrap": null,
  "_spec": "delaunay@0.4.0",
  "_where": "D:\\Work\\Codes\\SMap\\client\\node_modules\\euclideanmst",
  "author": {
    "name": "The Dark Sky Company",
    "email": "devsupport@darkskyapp.com"
  },
  "bugs": {
    "url": "https://github.com/darkskyapp/delaunay/issues"
  },
  "dependencies": {},
  "description": "Delaunay triangulation in arbitrary dimensions",
  "devDependencies": {
    "jasmine-node": "1.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "e796dff0132930d6c2ee2595410abb5611200b12",
    "tarball": "https://registry.npmjs.org/delaunay/-/delaunay-0.4.0.tgz"
  },
  "homepage": "https://github.com/darkskyapp/delaunay#readme",
  "keywords": [
    "delaunay",
    "triangulation"
  ],
  "maintainers": [
    {
      "name": "darkskyapp",
      "email": "devsupport@darkskyapp.com"
    }
  ],
  "name": "delaunay",
  "optionalDependencies": {},
  "readme": "Delaunay\n========\n\nThis is a little JavaScript library (for both the browser and Node.JS) that\ncomputes Delaunay triangulations in arbitrary dimensions.\n\nWell, actually, that's a lie. It only works in 2 or 3 dimensions. But! The code\nis written such that it would be very easy to get it to work in any number of\ndimensions! We just havn't had the need. (To do so, just generalize the\nalgorithms in `lib/matrix.js`.)\n\nFor examples on how to use the code, please look in the `examples/` directory.\n\nThis code isn't especially efficient; in particular, it runs in quadratic time.\nThere are very clever divide-and-conquer algorithms for Delaunay triangulation\n(even in arbitrary dimensions!) that are O(n log n). That said, it should be\nfast enough for most purposes.\n\nThis code has been in production use in the [Forecast\nAPI](http://developer.forecast.io/) for some months, and should be stable\nenough for general use.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/darkskyapp/delaunay.git"
  },
  "version": "0.4.0"
}
